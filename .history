(\x:(Nothing | Just Nat).variantCase x of Nothing => 0 | Just=y => y) (tag Just 2 as (Nothing | Just Nat))
(\x:(Nothing | Just Nat).variantCase x of Nothing => 0 | Just=y => y) (tag Nothing as (Nothing | Just Nat))
:t (\x:(Nothing | Just Nat).variantCase x of Nothing => 0 | Just=y => y) (tag Nothing as (Nothing | Just Nat))
:t (\x:(Nothing | Just Nat).variantCase x of Nothing => 0 | Just=y => y)
(\x:(Nothing | Just Nat).variantCase x of Nothing => 0 | Just=y => y)
let f (n : Nat) (p : Bool) = S n in f
let f (n : Nat) (p : Bool) = S n in f
let f (n : Nat) (p : Bool) = S n in f 2
let f (n : Nat) = S n in f 2
let f (n : Nat) = S n in f 0
let f (n : Nat) = S n in f 2
:t let f (n : Nat) = S n in f 2
:t let f (n : Nat) = S n in f
let f (n : Nat) = S n in f
:t let f (n : Nat) = S n in f
:t let f (n : Nat) = S n in f 1
let f (n : Nat) = S n in f 1
(\n:Nat.n) 1
:t (\p:Bool.\n:Nat.n)
:t (\n:Nat.n)
(\n:Nat.n)
:t (\n:Nat.n)
:t tag Nothing as (Nothing | Just Nat)
tag Nothing as (Nothing | Just Nat)
:t tag Left True as (Left Bool | Right Nat)
tag Left True as (Left Bool | Right Nat)
tag Left True as (Left Nat | Right Bool)
:t (1, True, Unit)
(1, True, Unit)
:t Unit
Unit
:t 1
1
:t True
True
:t (True, 1, (\x:Nat.x))
(True, 1, (\x:Nat.x))
:t (\p:Bool.if: p then: 1 else: 0)
:t True
True
4
3
2
1
:t True
True
:t True
True
(1,2,3,4)
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat (Nil | Cons [Nat, ListNat]))
tag Nil as (mu. ListNat Nil | Cons [Nat, ListNat])
tag Nil as (mu. ListNat Nil | Cons (Nat, ListNat))
let xs = tag Nil as (mu. ListNat Nil | Cons (Nat, ListNat)) in xs
(1,2,3,4)
:t (\x:Nothing | Just Nat. x)
(\x:Nothing | Just Nat. x)
(\x:Nat.x) 1
(\x:Nat.x)
(x:Nat.x)
let x = 1 in x
<1, True, True>
<1, True>
Unit
tag Just 1 as (Nothing | Just Nat)
:t tag Nothing as (Nothing | Just Nat)
tag Nothing as (Nothing | Just Nat)
tag Nothing Z as (Nothing Nat | Just Nat)
:t { foo=True, baz=False }
:t { foo=True, baz=False }
{ foo=True, baz=False }
:t (1, True, 1)
:t (1, True)
(1, True)
tag Nothing Z as (Nothing Nat | Just Nat)
tag Nothing Z as (Nothing Just | Just Nat)
tag Nothing as (Nothing Just | Just Nat)
:r
tag Nothing as (Nothing | Just Nat)
tag Nothing as (Nothing | Just)
tag Nothing as (Nothing | Just Nat)
tag Left Z as (Left Nat | Right Bool)
tag Monday Unit as Monday | Tuesday
tag Monday Unit as (Monday | Tuesday)
tag Monday as (Monday | Tuesday)
inl Unit : Sum Unit Nat
inl Unit : (Sum Unit Nat)
inl Unit as (Sum Unit Nat)
tag Nothing as (Nothing | Just Nat)
tag Just 1 as (Nothing | Just Nat)
tag Just 1 as (Nothing | Just Int)
