:t (\n:Left Nat | Right Bool.variantCase n of Left=x => ((\z:Nat.True) x))
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => ((\z:Nat.True) n))
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => ((\z:Nat.True) Z))
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => ((\z:Nat.True) x))
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => (\z:Nat.True) x)
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => (\z:Nat.True))
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => (\z:Nat.True) | Right=y => (\w:Bool.w))
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => ((\z:Nat.True) x) | Right=y => ((\w:Bool.w) y))
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => (\z:Nat.True) x | Right=y => (\w:Bool.w) y)
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => True | Right=y => Z)
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => True | Right=y => False)
:t (\n:Left Nat | Right Bool.variantCase n of Left=x => True | Right=y => False))
:t (\n:Left Nat | Right Bool.variantCase n of Left x => True | Right y => False))
:t (\n:Left Nat | Right Bool.n)
(\n:Left Nat | Right Bool.n)
:t (\z:Nat.\q:Nat.q)
(\z:Nat.\q:Nat.q)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in n)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => n | (S m) => m in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => n | (S m) => m in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => n | (S m) => m in )
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in x)
(\f:Nat->Nat.\n:Nat.let x = case n of Z => (\z:Nat.\q:Nat.n) | (S m) => (\h:Nat.\z:Nat.m) in f x)
(\x:Nat.l)
(\x:Nat.x)
