clear
x
(tag Cons (1, tag Cons (2, tag Cons (3, tag Nil))) as mu.NatList: Nil | Cons (Nat, NatList))
(tag Cons (1, tag Cons (2, tag Cons (3, tag Nil))) as mu.NatList: Nil | Cons (Nat, NatList))
(\x : Nat. x) (S Z)
(\x : Nat. x) Z
\x : Nat. x
z
y
x
x
\x : Nat. y
\x : Nat. x
tag Branch (tag Leaf, 0, tag Branch (tag Leaf, 1, tag Leaf)) as mu.NatTree: Leaf | Branch (NatTree, Nat, NatTree)
:t (tag Cons (1, tag Cons (2, tag Cons (3, tag Nil))) as mu.NatList: Nil | Cons (Nat, NatList))
(tag Cons (1, tag Cons (2, tag Cons (3, tag Nil))) as mu.NatList: Nil | Cons (Nat, NatList))
let x = 2 in (\y : Nat. S y) x
let x = 2 in (\y : Nat. S y)
let x = 2 in x
:t (\x : Nat. x) True
:t (\x : Nat. x) 23
:t \x : Nat. x
\x : Nat. x
:t {foo=True, bar=1}
:t{foo=True, bar=1}
{foo=True, bar=1}
tag Left True as (Left Bool | Right Nat)
tag (Left True) as (Left Bool | Right Nat)
:t (1, True, Unit)
(1, True, Unit)
(1, True)
:t Unit
Unit
()
:t False
False
True
0
:t 45
45
3
2
1
get {foo=1, bar=(\n:Nat.True) 1}.foo
{foo=1, bar=(\n:Nat.True) 1}
case 1 of Z=> True | (S m) => False
case 1 of Z=> True | (S m) => False
case Z of Z=> True | (S m) => False
case Z of Z=> True | (S m) => False
{foo=1, bar=(\n:Nat.True) 1}
{foo=1, bar=(\n:Nat.True)}
{foo=1, bar=(\n:Nat.True) 1}
(1, (\n:Nat.True) 1 )
(1, (\n:Nat.True) 1 )
(1, (\n:Nat.True))
(1, True)
tag (\u:Unit.Just 1) as Nothing | Just Nat
tag Just 1 as Nothing | Just Nat
tag Nothing as Nothing | Just Nat
get {foo=True, bar=False}.bar
get {foo=True, bar=False}.foo
get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).0
get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).1
get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).1
get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).0
get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).0
get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).0
get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).0
:t get ((\u:Unit.((\n:Nat.True) 1, False)) Unit).0
:t ((\u:Unit.((\n:Nat.True) 1, False)) Unit)
(\u:Unit.((\n:Nat.True) 1, False)) Unit
(\u:Unit.((\n:Nat.True) 1, False))
get (\u:Unit.((\n:Nat.True) 1, False)).0
get ((\n:Nat.True) 1, False).0
get ((\n:Nat.True), False).0
get (True, False).0
:t get (True, False).0
:t get (True, False).0
get (True, False).0
(True, False)
if: (\n:Nat.True) 1 then: 1 else: 0
if: (\n:Nat.True) 1 then: (\n:Nat.n) 1 else: (\n:Nat.n) 0
if: (\n:Nat.True) 1 then: (\n:Nat.n) 1 else: (\n:Nat.n) 0
if: (\n:Nat.True) then: (\n:Nat.n) 1 else: (\n:Nat.n) 0
if: True then: (\n:Nat.n) 1 else: (\n:Nat.n) 0
if: True then: 1 else: 0
if: True then: (\n:Nat.n) 1 else: (\n:Nat.n) 0
if: True then: 1 else: 0
:t if: True then: 1 else: 0
if: True then: 1 else: 0
(True, False, (\n:Nat.n) 1, (\n:Nat.n) 3)
(True, False, (\n:Nat.n) 1, (\n:Nat.n) 3)
(True, False, (\n:Nat.n) 1, (\n:Nat.n) 3)
((\n:Nat.n) 1, (\n:Nat.n) 3)
((\n:Nat.n) 1, (\n:Nat.n) 3)
(True, False, (\n:Nat.n) 1, (\n:Nat.n) 3)
(True, False, (\n:Nat.n) 1)
(True, False, (\n:Nat.n))
(True, False)
<True, (\n:Nat.n) 1>
